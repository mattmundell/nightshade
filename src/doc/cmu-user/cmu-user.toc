\contentsline {chapter}{\numberline {1}Introduction}{1}
\contentsline {section}{\numberline {1.1}Support}{1}
\contentsline {section}{\numberline {1.2}Local Distribution of CMU Common Lisp}{1}
\contentsline {section}{\numberline {1.3}Net Distribution of CMU Common Lisp}{2}
\contentsline {section}{\numberline {1.4}Source Availability}{2}
\contentsline {section}{\numberline {1.5}Command Line Options}{3}
\contentsline {section}{\numberline {1.6}Credits}{3}
\contentsline {chapter}{\numberline {2}Design Choices and Extensions}{5}
\contentsline {section}{\numberline {2.1}Data Types}{5}
\contentsline {subsection}{\numberline {2.1.1}Symbols}{5}
\contentsline {subsection}{\numberline {2.1.2}Integers}{5}
\contentsline {subsection}{\numberline {2.1.3}Floats}{5}
\contentsline {subsubsection}{\numberline {2.1.3.1}IEEE Special Values}{5}
\contentsline {subsubsection}{\numberline {2.1.3.2}Negative Zero}{6}
\contentsline {subsubsection}{\numberline {2.1.3.3}Denormalized Floats}{6}
\contentsline {subsubsection}{\numberline {2.1.3.4}Floating Point Exceptions}{6}
\contentsline {subsubsection}{\numberline {2.1.3.5}Floating Point Rounding Mode}{7}
\contentsline {paragraph}{Warning:}{7}
\contentsline {subsubsection}{\numberline {2.1.3.6}Accessing the Floating Point Modes}{7}
\contentsline {subsection}{\numberline {2.1.4}Characters}{8}
\contentsline {subsection}{\numberline {2.1.5}Array Initialization}{8}
\contentsline {section}{\numberline {2.2}Default Interrupts for Lisp}{8}
\contentsline {section}{\numberline {2.3}Packages}{8}
\contentsline {section}{\numberline {2.4}The Editor}{9}
\contentsline {section}{\numberline {2.5}Garbage Collection}{9}
\contentsline {subsection}{\numberline {2.5.1}GC Parameters}{10}
\contentsline {subsection}{\numberline {2.5.2}Weak Pointers}{11}
\contentsline {subsection}{\numberline {2.5.3}Finalization}{11}
\contentsline {section}{\numberline {2.6}Describe}{11}
\contentsline {section}{\numberline {2.7}The Inspector}{12}
\contentsline {subsection}{\numberline {2.7.1}The Graphical Interface}{12}
\contentsline {subsection}{\numberline {2.7.2}The TTY Inspector}{13}
\contentsline {section}{\numberline {2.8}Load}{13}
\contentsline {section}{\numberline {2.9}The Reader}{14}
\contentsline {section}{\numberline {2.10}Stream Extensions}{14}
\contentsline {section}{\numberline {2.11}Running Programs from Lisp}{14}
\contentsline {subsection}{\numberline {2.11.1}Process Accessors}{15}
\contentsline {section}{\numberline {2.12}Saving a Core Image}{17}
\contentsline {section}{\numberline {2.13}Pathnames}{17}
\contentsline {subsection}{\numberline {2.13.1}Unix Pathnames}{18}
\contentsline {subsection}{\numberline {2.13.2}Wildcard Pathnames}{18}
\contentsline {subsection}{\numberline {2.13.3}Logical Pathnames}{18}
\contentsline {subsection}{\numberline {2.13.4}Search Lists}{18}
\contentsline {subsection}{\numberline {2.13.5}Predefined Search-Lists}{19}
\contentsline {subsection}{\numberline {2.13.6}Search-List Operations}{19}
\contentsline {subsection}{\numberline {2.13.7}Search List Example}{20}
\contentsline {section}{\numberline {2.14}Filesystem Operations}{20}
\contentsline {subsection}{\numberline {2.14.1}Wildcard Matching}{20}
\contentsline {subsection}{\numberline {2.14.2}File Name Completion}{20}
\contentsline {subsection}{\numberline {2.14.3}Miscellaneous Filesystem Operations}{21}
\contentsline {section}{\numberline {2.15}Time Parsing and Formatting}{21}
\contentsline {section}{\numberline {2.16}Lisp Library}{22}
\contentsline {chapter}{\numberline {3}The Debugger}{23}
\contentsline {section}{\numberline {3.1}Debugger Introduction}{23}
\contentsline {section}{\numberline {3.2}The Command Loop}{24}
\contentsline {section}{\numberline {3.3}Stack Frames}{24}
\contentsline {subsection}{\numberline {3.3.1}Stack Motion}{24}
\contentsline {subsection}{\numberline {3.3.2}How Arguments are Printed}{24}
\contentsline {subsection}{\numberline {3.3.3}Function Names}{25}
\contentsline {subsection}{\numberline {3.3.4}Funny Frames}{26}
\contentsline {subsection}{\numberline {3.3.5}Debug Tail Recursion}{26}
\contentsline {subsection}{\numberline {3.3.6}Unknown Locations and Interrupts}{27}
\contentsline {section}{\numberline {3.4}Variable Access}{27}
\contentsline {subsection}{\numberline {3.4.1}Variable Value Availability}{28}
\contentsline {subsection}{\numberline {3.4.2}Note On Lexical Variable Access}{28}
\contentsline {section}{\numberline {3.5}Source Location Printing}{28}
\contentsline {subsection}{\numberline {3.5.1}How the Source is Found}{29}
\contentsline {subsection}{\numberline {3.5.2}Source Location Availability}{30}
\contentsline {section}{\numberline {3.6}Compiler Policy Control}{30}
\contentsline {section}{\numberline {3.7}Exiting Commands}{31}
\contentsline {section}{\numberline {3.8}Information Commands}{31}
\contentsline {section}{\numberline {3.9}Breakpoint Commands}{32}
\contentsline {subsection}{\numberline {3.9.1}Breakpoint Example}{32}
\contentsline {section}{\numberline {3.10}Function Tracing}{33}
\contentsline {subsection}{\numberline {3.10.1}Encapsulation Functions}{35}
\contentsline {section}{\numberline {3.11}Specials}{35}
\contentsline {chapter}{\numberline {4}The Compiler}{36}
\contentsline {section}{\numberline {4.1}Compiler Introduction}{36}
\contentsline {section}{\numberline {4.2}Calling the Compiler}{36}
\contentsline {section}{\numberline {4.3}Compilation Units}{38}
\contentsline {subsection}{\numberline {4.3.1}Undefined Warnings}{38}
\contentsline {section}{\numberline {4.4}Interpreting Error Messages}{39}
\contentsline {subsection}{\numberline {4.4.1}The Parts of the Error Message}{39}
\contentsline {subsection}{\numberline {4.4.2}The Original and Actual Source}{40}
\contentsline {subsection}{\numberline {4.4.3}The Processing Path}{41}
\contentsline {subsection}{\numberline {4.4.4}Error Severity}{41}
\contentsline {subsection}{\numberline {4.4.5}Errors During Macroexpansion}{42}
\contentsline {subsection}{\numberline {4.4.6}Read Errors}{42}
\contentsline {subsection}{\numberline {4.4.7}Error Message Parameterization}{43}
\contentsline {section}{\numberline {4.5}Types in Python}{43}
\contentsline {subsection}{\numberline {4.5.1}Compile Time Type Errors}{43}
\contentsline {subsection}{\numberline {4.5.2}Precise Type Checking}{44}
\contentsline {subsection}{\numberline {4.5.3}Weakened Type Checking}{45}
\contentsline {section}{\numberline {4.6}Getting Existing Programs to Run}{46}
\contentsline {section}{\numberline {4.7}Compiler Policy}{47}
\contentsline {subsection}{\numberline {4.7.1}The Optimize Declaration}{48}
\contentsline {subsection}{\numberline {4.7.2}The Optimize-Interface Declaration}{48}
\contentsline {section}{\numberline {4.8}Open Coding and Inline Expansion}{49}
\contentsline {chapter}{\numberline {5}Advanced Compiler Use and Efficiency Hints}{50}
\contentsline {section}{\numberline {5.1}Advanced Compiler Introduction}{50}
\contentsline {subsection}{\numberline {5.1.1}Types}{50}
\contentsline {subsection}{\numberline {5.1.2}Optimization}{50}
\contentsline {subsection}{\numberline {5.1.3}Function Call}{51}
\contentsline {subsection}{\numberline {5.1.4}Representation of Objects}{52}
\contentsline {subsection}{\numberline {5.1.5}Writing Efficient Code}{52}
\contentsline {section}{\numberline {5.2}More About Types in Python}{53}
\contentsline {subsection}{\numberline {5.2.1}More Types Meaningful}{53}
\contentsline {subsection}{\numberline {5.2.2}Canonicalization}{53}
\contentsline {subsection}{\numberline {5.2.3}Member Types}{54}
\contentsline {subsection}{\numberline {5.2.4}Union Types}{54}
\contentsline {subsection}{\numberline {5.2.5}The Empty Type}{54}
\contentsline {subsection}{\numberline {5.2.6}Function Types}{54}
\contentsline {subsection}{\numberline {5.2.7}The Values Declaration}{55}
\contentsline {subsection}{\numberline {5.2.8}Structure Types}{56}
\contentsline {subsection}{\numberline {5.2.9}The Freeze-Type Declaration}{56}
\contentsline {subsection}{\numberline {5.2.10}Type Restrictions}{57}
\contentsline {subsection}{\numberline {5.2.11}Type Style Recommendations}{57}
\contentsline {section}{\numberline {5.3}Type Inference}{58}
\contentsline {subsection}{\numberline {5.3.1}Variable Type Inference}{58}
\contentsline {subsection}{\numberline {5.3.2}Local Function Type Inference}{58}
\contentsline {subsection}{\numberline {5.3.3}Global Function Type Inference}{59}
\contentsline {subsection}{\numberline {5.3.4}Operation Specific Type Inference}{59}
\contentsline {subsection}{\numberline {5.3.5}Dynamic Type Inference}{59}
\contentsline {subsection}{\numberline {5.3.6}Type Check Optimization}{61}
\contentsline {section}{\numberline {5.4}Source Optimization}{62}
\contentsline {subsection}{\numberline {5.4.1}Let Optimization}{62}
\contentsline {subsection}{\numberline {5.4.2}Constant Folding}{63}
\contentsline {subsection}{\numberline {5.4.3}Unused Expression Elimination}{63}
\contentsline {subsection}{\numberline {5.4.4}Control Optimization}{64}
\contentsline {subsection}{\numberline {5.4.5}Unreachable Code Deletion}{64}
\contentsline {subsection}{\numberline {5.4.6}Multiple Values Optimization}{66}
\contentsline {subsection}{\numberline {5.4.7}Source to Source Transformation}{67}
\contentsline {subsection}{\numberline {5.4.8}Style Recommendations}{67}
\contentsline {section}{\numberline {5.5}Tail Recursion}{68}
\contentsline {subsection}{\numberline {5.5.1}Tail Recursion Exceptions}{69}
\contentsline {section}{\numberline {5.6}Local Call}{69}
\contentsline {subsection}{\numberline {5.6.1}Self-Recursive Calls}{69}
\contentsline {subsection}{\numberline {5.6.2}Let Calls}{70}
\contentsline {subsection}{\numberline {5.6.3}Closures}{70}
\contentsline {subsection}{\numberline {5.6.4}Local Tail Recursion}{71}
\contentsline {subsection}{\numberline {5.6.5}Return Values}{71}
\contentsline {section}{\numberline {5.7}Block Compilation}{72}
\contentsline {subsection}{\numberline {5.7.1}Block Compilation Semantics}{72}
\contentsline {subsection}{\numberline {5.7.2}Block Compilation Declarations}{73}
\contentsline {subsection}{\numberline {5.7.3}Compiler Arguments}{73}
\contentsline {subsection}{\numberline {5.7.4}Practical Difficulties}{74}
\contentsline {subsection}{\numberline {5.7.5}Context Declarations}{74}
\contentsline {subsection}{\numberline {5.7.6}Context Declaration Example}{75}
\contentsline {section}{\numberline {5.8}Inline Expansion}{75}
\contentsline {subsection}{\numberline {5.8.1}Inline Expansion Recording}{76}
\contentsline {subsection}{\numberline {5.8.2}Semi-Inline Expansion}{77}
\contentsline {subsection}{\numberline {5.8.3}The Maybe-Inline Declaration}{77}
\contentsline {section}{\numberline {5.9}Byte Coded Compilation}{78}
\contentsline {section}{\numberline {5.10}Object Representation}{79}
\contentsline {subsection}{\numberline {5.10.1}Think Before You Use a List}{79}
\contentsline {subsection}{\numberline {5.10.2}Structure Representation}{79}
\contentsline {subsection}{\numberline {5.10.3}Arrays}{79}
\contentsline {subsection}{\numberline {5.10.4}Vectors}{80}
\contentsline {subsection}{\numberline {5.10.5}Bit-Vectors}{80}
\contentsline {subsection}{\numberline {5.10.6}Hashtables}{80}
\contentsline {section}{\numberline {5.11}Numbers}{80}
\contentsline {subsection}{\numberline {5.11.1}Descriptors}{81}
\contentsline {subsection}{\numberline {5.11.2}Non-Descriptor Representations}{81}
\contentsline {subsection}{\numberline {5.11.3}Variables}{82}
\contentsline {subsection}{\numberline {5.11.4}Generic Arithmetic}{82}
\contentsline {subsection}{\numberline {5.11.5}Fixnums}{83}
\contentsline {subsection}{\numberline {5.11.6}Word Integers}{84}
\contentsline {subsection}{\numberline {5.11.7}Floating Point Efficiency}{84}
\contentsline {subsection}{\numberline {5.11.8}Specialized Arrays}{84}
\contentsline {subsection}{\numberline {5.11.9}Specialized Structure Slots}{85}
\contentsline {subsection}{\numberline {5.11.10}Interactions With Local Call}{85}
\contentsline {subsection}{\numberline {5.11.11}Representation of Characters}{86}
\contentsline {section}{\numberline {5.12}General Efficiency Hints}{86}
\contentsline {subsection}{\numberline {5.12.1}Compile Your Code}{86}
\contentsline {subsection}{\numberline {5.12.2}Avoid Unnecessary Consing}{86}
\contentsline {subsection}{\numberline {5.12.3}Complex Argument Syntax}{86}
\contentsline {subsection}{\numberline {5.12.4}Mapping and Iteration}{87}
\contentsline {subsection}{\numberline {5.12.5}Trace Files and Disassembly}{87}
\contentsline {section}{\numberline {5.13}Efficiency Notes}{88}
\contentsline {subsection}{\numberline {5.13.1}Type Uncertainty}{88}
\contentsline {subsection}{\numberline {5.13.2}Efficiency Notes and Type Checking}{89}
\contentsline {subsection}{\numberline {5.13.3}Representation Efficiency Notes}{89}
\contentsline {subsection}{\numberline {5.13.4}Verbosity Control}{91}
\contentsline {section}{\numberline {5.14}Profiling}{91}
\contentsline {subsection}{\numberline {5.14.1}Profile Interface}{91}
\contentsline {subsection}{\numberline {5.14.2}Profiling Techniques}{92}
\contentsline {subsection}{\numberline {5.14.3}Nested or Recursive Calls}{92}
\contentsline {subsection}{\numberline {5.14.4}Clock resolution}{92}
\contentsline {subsection}{\numberline {5.14.5}Profiling overhead}{92}
\contentsline {subsection}{\numberline {5.14.6}Additional Timing Utilities}{92}
\contentsline {subsection}{\numberline {5.14.7}A Note on Timing}{93}
\contentsline {subsection}{\numberline {5.14.8}Benchmarking Techniques}{93}
\contentsline {chapter}{\numberline {6}UNIX Interface}{95}
\contentsline {section}{\numberline {6.1}Reading the Command Line}{95}
\contentsline {section}{\numberline {6.2}Useful Variables}{96}
\contentsline {section}{\numberline {6.3}Lisp Equivalents for C Routines}{96}
\contentsline {section}{\numberline {6.4}Type Translations}{97}
\contentsline {section}{\numberline {6.5}System Area Pointers}{97}
\contentsline {section}{\numberline {6.6}Unix System Calls}{98}
\contentsline {section}{\numberline {6.7}File Descriptor Streams}{98}
\contentsline {section}{\numberline {6.8}Making Sense of Mach Return Codes}{99}
\contentsline {section}{\numberline {6.9}Unix Interrupts}{100}
\contentsline {subsection}{\numberline {6.9.1}Changing Interrupt Handlers}{100}
\contentsline {subsection}{\numberline {6.9.2}Examples of Signal Handlers}{101}
\contentsline {chapter}{\numberline {7}Event Dispatching with SERVE-EVENT}{102}
\contentsline {section}{\numberline {7.1}Object Sets}{102}
\contentsline {section}{\numberline {7.2}The SERVE-EVENT Function}{103}
\contentsline {section}{\numberline {7.3}Using SERVE-EVENT with Unix File Descriptors}{103}
\contentsline {section}{\numberline {7.4}Using SERVE-EVENT with the CLX Interface to X}{104}
\contentsline {subsection}{\numberline {7.4.1}Without Object Sets}{104}
\contentsline {subsection}{\numberline {7.4.2}With Object Sets}{105}
\contentsline {section}{\numberline {7.5}A SERVE-EVENT Example}{105}
\contentsline {subsection}{\numberline {7.5.1}Without Object Sets Example}{105}
\contentsline {subsection}{\numberline {7.5.2}With Object Sets Example}{107}
\contentsline {chapter}{\numberline {8}Alien Objects}{110}
\contentsline {section}{\numberline {8.1}Introduction to Aliens}{110}
\contentsline {section}{\numberline {8.2}Alien Types}{110}
\contentsline {subsection}{\numberline {8.2.1}Defining Alien Types}{111}
\contentsline {subsection}{\numberline {8.2.2}Alien Types and Lisp Types}{111}
\contentsline {subsection}{\numberline {8.2.3}Alien Type Specifiers}{111}
\contentsline {subsection}{\numberline {8.2.4}The C-Call Package}{112}
\contentsline {section}{\numberline {8.3}Alien Operations}{113}
\contentsline {subsection}{\numberline {8.3.1}Alien Access Operations}{113}
\contentsline {subsection}{\numberline {8.3.2}Alien Coercion Operations}{113}
\contentsline {subsection}{\numberline {8.3.3}Alien Dynamic Allocation}{114}
\contentsline {section}{\numberline {8.4}Alien Variables}{114}
\contentsline {subsection}{\numberline {8.4.1}Local Alien Variables}{114}
\contentsline {subsection}{\numberline {8.4.2}External Alien Variables}{115}
\contentsline {section}{\numberline {8.5}Alien Data Structure Example}{115}
\contentsline {section}{\numberline {8.6}Loading Unix Object Files}{116}
\contentsline {section}{\numberline {8.7}Alien Function Calls}{117}
\contentsline {subsection}{\numberline {8.7.1}The alien-funcall Primitive}{117}
\contentsline {subsection}{\numberline {8.7.2}The def-alien-routine Macro}{118}
\contentsline {subsection}{\numberline {8.7.3}def-alien-routine Example}{118}
\contentsline {subsection}{\numberline {8.7.4}Calling Lisp from C}{119}
\contentsline {section}{\numberline {8.8}Step-by-Step Alien Example}{119}
\contentsline {chapter}{\numberline {9}Interprocess Communication under LISP}{122}
\contentsline {section}{\numberline {9.1}The REMOTE Package}{122}
\contentsline {subsection}{\numberline {9.1.1}Connecting Servers and Clients}{122}
\contentsline {subsection}{\numberline {9.1.2}Remote Evaluations}{123}
\contentsline {subsection}{\numberline {9.1.3}Remote Objects}{124}
\contentsline {subsection}{\numberline {9.1.4}Host Addresses}{125}
\contentsline {section}{\numberline {9.2}The WIRE Package}{125}
\contentsline {subsection}{\numberline {9.2.1}Untagged Data}{125}
\contentsline {subsection}{\numberline {9.2.2}Tagged Data}{126}
\contentsline {subsection}{\numberline {9.2.3}Making Your Own Wires}{126}
\contentsline {section}{\numberline {9.3}Out-Of-Band Data}{126}
\contentsline {chapter}{\numberline {10}Debugger Programmer's Interface}{128}
\contentsline {section}{\numberline {10.1}DI Exceptional Conditions}{128}
\contentsline {subsection}{\numberline {10.1.1}Debug-conditions}{128}
\contentsline {subsection}{\numberline {10.1.2}Debug-errors}{129}
\contentsline {section}{\numberline {10.2}Debug-variables}{129}
\contentsline {section}{\numberline {10.3}Frames}{130}
\contentsline {section}{\numberline {10.4}Debug-functions}{131}
\contentsline {section}{\numberline {10.5}Debug-blocks}{133}
\contentsline {section}{\numberline {10.6}Breakpoints}{133}
\contentsline {section}{\numberline {10.7}Code-locations}{134}
\contentsline {section}{\numberline {10.8}Debug-sources}{135}
\contentsline {section}{\numberline {10.9}Source Translation Utilities}{136}
\contentsline {chapter}{Function Index}{137}
\contentsline {chapter}{Variable Index}{140}
\contentsline {chapter}{Type Index}{141}
\contentsline {chapter}{Concept Index}{142}
